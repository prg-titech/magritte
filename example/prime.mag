# Random generator that only outputs either 0 or 1
(binary-rand) = (round 0 (rand))

# Generate a sequence of n random bits
(gen-bits ?n) = (produce %binary-rand | take %n)

# Convert a number in base b to base 10
(from-base ?b) = (
  num = 0
  each (?d =>
    %num = (mul %b %num | into %add %d)
  )
  put %num
)

# Generate a random number having n bits. Note that the function
# breaks when n < 3 because we want to ensure that the leading and
# trailing bit is set to 1. Of course, nobody should actually call the
# function with n < 3 because that defeats the purpose of the function.
(gen-number ?n) = (
  (put 1; (gen-bits (add %n -2)); put 1)
  | from-base 2
)

# In Miller-rabin we want to factor a number num = (2^r)*d
# and learn what r and d is. This function returns r and d
(miller-rabin-factoring ?num ?r) = (
  eq 0 (mod 2 %num) && miller-rabin-factoring (div 2 %num) (inc %r)
    !! put %r %num
)

# Check if any of the first r elements in the sequence x{i+1} = x{i}^2 mod n
# is equal to n-1
(miller-rabin-loop ?r ?x ?n) = (
  iter (?x => mod %n (pow 2 %x)) %x | take %r | any [eq (dec %n)]
)

# Generate a random number in the range [begin, end]
(random-number-in-range ?begin ?end) = (
  mul (sub %begin %end) (rand) | into round 0 | into add %begin
)

# Helper method for the Miller-rabin primality test
# Checks if num is prime using i random numbers
# r and d are found from (n-1) = 2^r * d
(miller-rabin-test ?i ?num ?r ?d) = (
  range %i | all (_ =>
    rnum = (random-number-in-range 2 (sub 2 %num))
    x = (pow %d %rnum | into mod %num)
    eq 1 %x || eq %x (dec %num) || (miller-rabin-loop %r %x %num)
  )
)

# The Miller-rabin primality test
# Succeeds if num is probably prime.
# You can increase i to increase the certainty.
# Fails if num is not prime
(miller-rabin ?i ?num) = (
  eq 1 (mod 2 %num) && (
    r d = (miller-rabin-factoring (dec %num) 0)
    (miller-rabin-test %i %num %r %d)
  )
)

(gen-primes ?b) = (
  # produce (=> gen-number %b) | take 10
  produce [%gen-number %b] | each (?n => iter %inc %n | take %b)
    | filter [%miller-rabin 10]
)

(gen-prime ?b) = (gen-primes %b | take 1)

(sum) = (
  num = 0
  each (?d =>
    %num = (add %d %num) # | into %add %d)
  )
  put %num
)

(testy) = (
  produce (=>
    put 1 | sum
  ) | take 10
  put done
)

(__main__) = gen-primes 10
# (__main__) = testy
# (__main__) = put 1
