load mag/prelude.mag

# put hello

(skip ?reason ?name ?fn) = put (str "- skip:" $name " (" $reason ")")
(test ?name ?fn) = (
  (
    %name => run-test %name %fn
          => run-test %name %fn
    _     => skip not-focused %name %fn
  ) (getenv MAGRITTE_FOCUS)
)

(run-test ?name ?fn) = (
  put (str "- test:" $name)
  %fn && put "-- pass" !! put "-- fail"
)

test pipe-cases (=>
  (
    put [a 1]
    put [b 2]
    put [a 3]
    put [b 4]
  ) | each (
    [a ?x] => put [a (mul 10 $x)]
    [b ?y] => put [b (mul 100 $y)]
  )
)

test alternating-iter (=>
  vm-debug open ./tmp/out
  iter (
    [a ?x] => put [b (add 1 $x)]
    [b ?y] => put [a (add 2 $y)]
  ) [a 1]
  | take 10
  vm-debug off
)

skip deadlock iter (=>
  iter [add 1] 0 | each mul 3 | take 10
)

skip crashes-whole-thing crash (=>
  out = (& crash oops && put yay !! put "oh no")

  eq $out ""
)

test modules (=>
  my-module = {
    a = 1
    b = 2
    (thing ?c) = add %a %b %c
  }

  $my-module!thing 6
)

test channels (=>
  c = (make-channel)

  out = [(
    (
      put 1 %% (put comp > %c)
      put 2 3 4 5 6
    ) | take 2

    get < $c
  )]

  put (str "out: " $out)
  eq $out [1 2 3]
)

test nested-put (=>
  eq (put (put 1)) 1
)

skip bails-too-early thread-into-collector (=>
  out = [0 (put 1 2 3 4 5 6 7 8 9 10 | (& drain; & drain))]
  eq 11 (len $out)
)

skip infinite-loop slide-example (=>
  count-forever | (& drain; & drain) | get
)

getenv MAGRITTE_DEBUG_TO
